<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Woo_home</title>
    <link>https://woogithub.github.io/tags/java/</link>
    <description>Recent content in Java on Woo_home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 12 Dec 2019 00:14:19 +0800</lastBuildDate>
    
	<atom:link href="https://woogithub.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java反射机制的简单使用</title>
      <link>https://woogithub.github.io/post/java/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 12 Dec 2019 00:14:19 +0800</pubDate>
      
      <guid>https://woogithub.github.io/post/java/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>什么是Java反射机制？ Java反射机制是 Java 语言的一个重要特性，它在服务器程序和中间件程序中得到了广泛运用。在服务器端，往往需要根据客户的请</description>
    </item>
    
    <item>
      <title>几种实现字符串反转的方式</title>
      <link>https://woogithub.github.io/post/java/%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 10 Aug 2019 00:14:19 +0800</pubDate>
      
      <guid>https://woogithub.github.io/post/java/%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>charAt（int index） 利用 charAt 的方式，是一个能够用来检索特定索引下的字符的String实例的方法，charAt()方法返回指定索引位</description>
    </item>
    
    <item>
      <title>编写一个接口，实现代理设计模式</title>
      <link>https://woogithub.github.io/post/java/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fproxy/</link>
      <pubDate>Sat, 10 Aug 2019 00:14:19 +0800</pubDate>
      
      <guid>https://woogithub.github.io/post/java/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fproxy/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 interface NetWork{ public void name(); } class Demo1 implements NetWork{ @Override public void name() { System.out.prin</description>
    </item>
    
  </channel>
</rss>