<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Justin写字的地方</title>
    <link>http://sharecore.net/tags/golang/</link>
    <description>Recent content in Golang on Justin写字的地方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 Jan 2014 00:10:45 +0000</lastBuildDate>
    
	<atom:link href="http://sharecore.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对Go的Slice进行Append的一个坑</title>
      <link>http://sharecore.net/post/%E5%AF%B9go%E7%9A%84slice%E8%BF%9B%E8%A1%8Cappend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Thu, 09 Jan 2014 00:10:45 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E5%AF%B9go%E7%9A%84slice%E8%BF%9B%E8%A1%8Cappend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>今天我们说说Go为数不多的一个“坑”。这个“坑”的代码是这样的： func main() { arr1 := [5]int{1, 2, 3, 4, 5} slice1 := arr1[1:2] slice1 = append(slice1, 6, 7, 8) fmt.Println(&amp;quot;slice1:&amp;quot;, slice1) fmt.Println(&amp;quot;arr1:&amp;quot;, arr1) arr2 := [5]int{1, 2, 3, 4, 5} slice2 := arr2[1:3] slice2 = append(slice2, 6, 7,</description>
    </item>
    
    <item>
      <title>Golang的Slice机制解析</title>
      <link>http://sharecore.net/post/golang%E7%9A%84slice%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 29 Sep 2013 00:12:52 +0000</pubDate>
      
      <guid>http://sharecore.net/post/golang%E7%9A%84slice%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</guid>
      <description>Rob Pike写了篇关于Go的数组与切片的文章：Arrays, slices (and strings): The mechanics of &amp;lsquo;append&amp;rsquo; ，介绍了slice的实现和一些常见的操作。其部分内容与我这篇文章是重</description>
    </item>
    
    <item>
      <title>怎么写Go的基准测试</title>
      <link>http://sharecore.net/post/%E6%80%8E%E4%B9%88%E5%86%99go%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 04 Jul 2013 00:38:31 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E6%80%8E%E4%B9%88%E5%86%99go%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>Dave Cheney在他的blog写了一篇关于Go的基准测试编写的基本介绍(链接)。我以此为内容，整理输出内容。 对自己编写package编写基准测</description>
    </item>
    
    <item>
      <title>Go并发编程模式进阶</title>
      <link>http://sharecore.net/post/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 10 Jun 2013 00:09:57 +0000</pubDate>
      
      <guid>http://sharecore.net/post/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6/</guid>
      <description>&lt;p&gt;前段时间Google的&lt;a href=&#34;http://profiles.google.com/ajmani&#34;&gt;Sameer Ajmani&lt;/a&gt;在Google I/O上做了关于Go的并发模式的介绍。Slides&lt;a href=&#34;http://talks.golang.org/2013/advconc.slide&#34;&gt;在此&lt;/a&gt;,youtube视频&lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=QDDwwePbDtw&#34;&gt;在此&lt;/a&gt;(注：上述链接均需翻墙)。&lt;/p&gt;

&lt;p&gt;本篇的前提是对goroutine+channel的并发编程模式有基本的了解，建议能读懂下面这个经典ping-pong程序为好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)
//定义一个结构
type Ball struct{ hits int }

func main() {
	//创建一个可传输Ball的channel
	table := make(chan *Ball)
	//分别启动ping/pong的goroutine 
	go Player(&amp;quot;Ping&amp;quot;, table)
	go Player(&amp;quot;Pong&amp;quot;, table)
	//一个Ball进入channel，游戏开始
	table &amp;lt;- new(Ball)
	//“主”程序暂停1s,等待ping/pong的goroutine执行
	time.Sleep(1 * time.Second)
	//从channel取出Ball，游戏开始
	&amp;lt;-table
	//可通过引发异常，显示调用栈的详细信息
	//panic(&amp;quot;show me the stacks&amp;quot;)
}

func Player(name string, table chan *Ball) {
	for {
	    //channel取出Ball，并hits++
	    ball := &amp;lt;-table
	    ball.hits++
	    fmt.Println(name, ball.hits)
	    //暂停1ms
	    time.Sleep(1 * time.Millisecond)
	    //将Ball放回channel
	    table &amp;lt;- ball
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ping-pong程序的执行过程，可以用下图来表示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sharecore.net/images/advgoroutine/pingpong.png&#34; alt=&#34;ping-pong程序执行过程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接下来主要说说Go的并发编程里的一些“文艺”使用:如何通信?如何周期性处理事件？如何取消执行？这些高级用法的支持，除了依赖我们上面看到的goroutine+channel外，还要依赖于Go的一个statement：select+case。它可以用来管理和监听多个channel,从而起到“多路复用”的效果。他的基本语法如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select {
	case xc &amp;lt;- x:
		// 向channel(xc)发送一个对象(x)
	case y := &amp;lt;-yc:
		// 从channel(yc)获取一个对象并赋值到变量(y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们以一个能持续从RSS获取资源项的例子来说明select的使用。
假设我们已经拥有下面这个接口所定义的功能：从一个RSS url获取资源项目(一次调用，获取一次,这个接口的模拟实现，见附1。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Fetcher interface {
	Fetch() (items []Item, next time.Time, err error)//能从某个rss url获取它的资源项，并能同时返回下一次获取的时间next。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`我们用下面这个接口来表示我们希望达到的功能：能从rss url上循环获取资源项，形成资源流的形式；循环获取功能，可以中止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Subscription interface {
	Updates() &amp;lt;-chan Item//用channel来存放资源，即可实现流的显示
	Close() error//关闭获取
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先看一个这项功能的简单实现，熟悉多线程编程的，应该觉得很眼熟。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
type NavieSub struct {
	closed  bool
	err     error
	updates chan Item
	fetcher Fetcher
}

func (s *NavieSub) Close() error {
	s.closed = true//设置关闭标识为true
	return s.err
}
func (s *NavieSub) Updates() &amp;lt;-chan Item {
	return s.updates//返回已经获取的资源项
}
func (s *NavieSub) loop() {//循环获取的方法实现
	for {
	    if s.closed {//判断关闭标识
	        close(s.updates)//close是内置函数
	        return
	    }
	    items, next, err := s.fetcher.Fetch()//执行一次获取
	    if err != nil {
	        s.err = err
	        time.Sleep(10 * time.Second)
	        continue//出错时暂停10秒后再开始下次循环
	    }
	    for _, item := range items {//将获取的资源项写入，用于返回
	        s.updates &amp;lt;- item
	    }
	    if now := time.Now(); next.After(now) {//暂停到下次获取时间时，再开始下一次获取
	        time.Sleep(next.Sub(now))
	    }
	}
}

func main() {
	fetcher := &amp;amp;FakeFether{channel: &amp;quot;sharecore.info&amp;quot;}
	s := &amp;amp;NavieSub{
	    fetcher: fetcher,
	    updates: make(chan Item),
	}
	
	go s.loop()//启动一个例程执行loop方法（与启动一个线程类似）
	
	time.AfterFunc(3*time.Second, func() {
	    fmt.Println(&amp;quot;closed&amp;quot;, s.Close())
	})
	
	for item := range s.Updates() {
	    fmt.Println(item.Channel, item.Title)
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`那以上的简单实现，会有什么问题呢？&lt;/p&gt;

&lt;p&gt;首先，&lt;strong&gt;明显发现s.err和s.closed的访问是非同步的。&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.closed = true //设置关闭标识为true

if s.closed {//判断关闭标识
	        close(s.updates) //close是内置函数
	        return
	    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`然后，我们看到s.updates的定义如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s := &amp;amp;NavieSub{
	    fetcher: fetcher,
	    updates: make(chan Item),//定义为没有buffer的channel，一个channel中同时只能有一个元素
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`根据上面的定义，s.updates一次只能有一个item进入，当它没有其他goroutine从它里面取出元素时，下面这行代码会&lt;strong&gt;发生堵塞&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.updates &amp;lt;- item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`那以上问题我们有什么办法来避免呢？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>