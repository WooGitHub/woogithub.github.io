<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Justin写字的地方</title>
    <link>http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Justin写字的地方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 16 Feb 2019 18:08:26 +0800</lastBuildDate>
    
	<atom:link href="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深度学习入门</title>
      <link>http://sharecore.net/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 16 Feb 2019 18:08:26 +0800</pubDate>
      
      <guid>http://sharecore.net/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</guid>
      <description>本文是前段时间在团队分享关于深度学习入门的PPT资料，介绍了从线性回归模型到神经网络模型的相关基础知识。</description>
    </item>
    
    <item>
      <title>应用密码学概要</title>
      <link>http://sharecore.net/post/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A6%82%E8%A6%81.mmark/</link>
      <pubDate>Sat, 22 Sep 2018 15:28:14 +0800</pubDate>
      
      <guid>http://sharecore.net/post/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A6%82%E8%A6%81.mmark/</guid>
      <description>异或(XOR) 文章的开篇，我们从最简单的异或说起。异或是一个二元判断操作，当两个输入相同时返回0，相异时返回0。常用符号&amp;rdquo;⊕&amp;r</description>
    </item>
    
    <item>
      <title>简单两层神经网络的实现</title>
      <link>http://sharecore.net/post/%E7%AE%80%E5%8D%95%E4%B8%A4%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 09 Sep 2018 11:17:54 +0800</pubDate>
      
      <guid>http://sharecore.net/post/%E7%AE%80%E5%8D%95%E4%B8%A4%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>开一个系列，用python和numpy实现神经网络，这是第一篇，实现一个简单的二层神经网络，处理经典mnist手写数字识别，精度可在94%左</description>
    </item>
    
    <item>
      <title>JVM GC知识笔记</title>
      <link>http://sharecore.net/post/gc%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 07 May 2017 22:27:29 +0000</pubDate>
      
      <guid>http://sharecore.net/post/gc%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</guid>
      <description>对象存活性 引用计数法 算法:每个对象有一个引用计数器，每一次对象被引用，计数器+1，引用失效时，计数器-1，计数器为0的对象即未被引用，可以回</description>
    </item>
    
    <item>
      <title>RPC服务追踪的原理与实践</title>
      <link>http://sharecore.net/post/rpc%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 09 Mar 2017 10:00:00 +0000</pubDate>
      
      <guid>http://sharecore.net/post/rpc%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid>
      <description>在分布式服务化架构下，由于分布式服务间存在相互依赖，彼此协同来完成各类业务场景。下图是一个典型的业务场景，从前端发起一个请求，到最后的业务完</description>
    </item>
    
    <item>
      <title>I/O模型基本介绍</title>
      <link>http://sharecore.net/post/i-o%E6%A8%A1%E5%9E%8B%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 13 Jun 2016 19:24:36 +0000</pubDate>
      
      <guid>http://sharecore.net/post/i-o%E6%A8%A1%E5%9E%8B%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid>
      <description>作为后台开发，高并发和高性能问题，是最常需要面对的。而解决高并发和高性能问题，选择合适的I/O模型是必由之路。本文将对各种I/O模型作基本介</description>
    </item>
    
    <item>
      <title>模式匹配初析</title>
      <link>http://sharecore.net/post/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%88%9D%E6%9E%90/</link>
      <pubDate>Sun, 24 Aug 2014 12:58:29 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%88%9D%E6%9E%90/</guid>
      <description>前几天看到篇C#6.0的draft spec，发现C#6.0里将惊现模式匹配。如是便在做了翻宣讲说“模式匹配”是一个很好用的特性，但是不知道跟</description>
    </item>
    
    <item>
      <title>字符编码常识及问题解析</title>
      <link>http://sharecore.net/post/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 10 Aug 2014 23:53:04 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/</guid>
      <description>在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几，确实挺失望的。</description>
    </item>
    
    <item>
      <title>浅谈服务化架构</title>
      <link>http://sharecore.net/post/%E6%B5%85%E8%B0%88%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 02 Aug 2014 23:54:42 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E6%B5%85%E8%B0%88%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/</guid>
      <description>这两年来，在服务化架构设计上的实践比较多，在此对关于服务化设计一些经验稍作总结，知识经验水平有限，如有欠缺和不准确的地方，还请指出修正！ 我在</description>
    </item>
    
    <item>
      <title>技术的进化</title>
      <link>http://sharecore.net/post/%E6%8A%80%E6%9C%AF%E7%9A%84%E8%BF%9B%E5%8C%96/</link>
      <pubDate>Sun, 20 Jul 2014 23:58:29 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E6%8A%80%E6%9C%AF%E7%9A%84%E8%BF%9B%E5%8C%96/</guid>
      <description>前几日，吴军博士在微博上转发了王石为其新书《文明之光》写的序言。在序言里，王石提到了达尔文进化论在社会与技术的适应性问题。王石在他短短几句话</description>
    </item>
    
    <item>
      <title>可扩展架构设计的三个维度</title>
      <link>http://sharecore.net/post/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:01 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6/</guid>
      <description>业界对于可扩展的系统架构设计有一个朴素的理念,就是：通过加机器就可以解决容量和可用性问题。 这一理念在“云计算”概念疯狂流行的今天，得到了广泛</description>
    </item>
    
    <item>
      <title>值得借鉴的Google测试经验</title>
      <link>http://sharecore.net/post/%E5%80%BC%E5%BE%97%E5%80%9F%E9%89%B4%E7%9A%84google%E6%B5%8B%E8%AF%95%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Sun, 29 Jun 2014 00:01:03 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E5%80%BC%E5%BE%97%E5%80%9F%E9%89%B4%E7%9A%84google%E6%B5%8B%E8%AF%95%E7%BB%8F%E9%AA%8C/</guid>
      <description>近来读了《Google软件测试之道》一书，以下是我从书里得来的两点经验： 一.紧密结合开发过程与测试 测试之难，保证产品开发质量之难，每个公司每</description>
    </item>
    
    <item>
      <title>过载保护算法浅析</title>
      <link>http://sharecore.net/post/%E8%BF%87%E8%BD%BD%E4%BF%9D%E6%8A%A4%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</link>
      <pubDate>Sat, 21 Jun 2014 00:01:40 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E8%BF%87%E8%BD%BD%E4%BF%9D%E6%8A%A4%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</guid>
      <description>何为过载保护？所谓“过载”，即需求超过了负载能力;而“保护”则是指当“过载”发生了，采取必要的措施保护自己不受“伤害”。在计算机领域，尤其是</description>
    </item>
    
    <item>
      <title>程序员持续学习之道</title>
      <link>http://sharecore.net/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/</link>
      <pubDate>Sun, 15 Jun 2014 00:02:25 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/</guid>
      <description>我其实是一个悲观主义者，从开始成为一名程序员的那一天开始，我就对自己的职业充满着担忧。早期，我担忧的是我刚进入这一行，落后身边从事这一行多年</description>
    </item>
    
    <item>
      <title>粗略估算</title>
      <link>http://sharecore.net/post/%E7%B2%97%E7%95%A5%E4%BC%B0%E7%AE%97/</link>
      <pubDate>Sun, 08 Jun 2014 00:03:08 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E7%B2%97%E7%95%A5%E4%BC%B0%E7%AE%97/</guid>
      <description>今天我们以两道可能看起来有点“惨无人道”的题目开始 1.一个长方体的卡车车厢能装下多少个高尔夫球？ 2.密西西比河一天流出多少水？ 第一个题目据说</description>
    </item>
    
    <item>
      <title>程序员的良心</title>
      <link>http://sharecore.net/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%89%AF%E5%BF%83/</link>
      <pubDate>Sat, 31 May 2014 00:04:20 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%89%AF%E5%BF%83/</guid>
      <description>前几日，深圳暴雨，官方说是“xx年一遇”。当大家听到“xx年一遇”这一说时，你肯定猜到了后果就是城市成了一片汪洋，整个城市陷入瘫痪，所有的房</description>
    </item>
    
    <item>
      <title>MapReduce的变体:HashFold介绍</title>
      <link>http://sharecore.net/post/mapreduce%E7%9A%84%E5%8F%98%E4%BD%93-hashfold%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 17 Mar 2014 00:09:01 +0000</pubDate>
      
      <guid>http://sharecore.net/post/mapreduce%E7%9A%84%E5%8F%98%E4%BD%93-hashfold%E4%BB%8B%E7%BB%8D/</guid>
      <description>说到MapReduce计算模型大家应该都清楚。今天我们来看一下MapReduce一个变体：HasFold。 这种模型将MapReduce中一些</description>
    </item>
    
    <item>
      <title>防御性编程小例</title>
      <link>http://sharecore.net/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B%E5%B0%8F%E4%BE%8B/</link>
      <pubDate>Mon, 13 Jan 2014 00:06:36 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B%E5%B0%8F%E4%BE%8B/</guid>
      <description>今天面试一个人时，突然想起一个话题：防御性编程 。我们先看一个小程序，这也是以前出过的一道简单面试题：写一个函数，可以将一个小写字母转换为大写</description>
    </item>
    
    <item>
      <title>对Go的Slice进行Append的一个坑</title>
      <link>http://sharecore.net/post/%E5%AF%B9go%E7%9A%84slice%E8%BF%9B%E8%A1%8Cappend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Thu, 09 Jan 2014 00:10:45 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E5%AF%B9go%E7%9A%84slice%E8%BF%9B%E8%A1%8Cappend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>今天我们说说Go为数不多的一个“坑”。这个“坑”的代码是这样的： func main() { arr1 := [5]int{1, 2, 3, 4, 5} slice1 := arr1[1:2] slice1 = append(slice1, 6, 7, 8) fmt.Println(&amp;quot;slice1:&amp;quot;, slice1) fmt.Println(&amp;quot;arr1:&amp;quot;, arr1) arr2 := [5]int{1, 2, 3, 4, 5} slice2 := arr2[1:3] slice2 = append(slice2, 6, 7,</description>
    </item>
    
    <item>
      <title>Golang的Slice机制解析</title>
      <link>http://sharecore.net/post/golang%E7%9A%84slice%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 29 Sep 2013 00:12:52 +0000</pubDate>
      
      <guid>http://sharecore.net/post/golang%E7%9A%84slice%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</guid>
      <description>Rob Pike写了篇关于Go的数组与切片的文章：Arrays, slices (and strings): The mechanics of &amp;lsquo;append&amp;rsquo; ，介绍了slice的实现和一些常见的操作。其部分内容与我这篇文章是重</description>
    </item>
    
    <item>
      <title>Linux文件系统十问</title>
      <link>http://sharecore.net/post/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8D%81%E9%97%AE/</link>
      <pubDate>Sun, 25 Aug 2013 00:32:10 +0000</pubDate>
      
      <guid>http://sharecore.net/post/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8D%81%E9%97%AE/</guid>
      <description>今天读到这篇文章:Linux文件系统十问，你知道吗？，作了个总结笔记： 1、机械磁盘随机读写时速度非常慢，操作系统是采用什么技巧来提高随机读写</description>
    </item>
    
    <item>
      <title>怎么写Go的基准测试</title>
      <link>http://sharecore.net/post/%E6%80%8E%E4%B9%88%E5%86%99go%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 04 Jul 2013 00:38:31 +0000</pubDate>
      
      <guid>http://sharecore.net/post/%E6%80%8E%E4%B9%88%E5%86%99go%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>Dave Cheney在他的blog写了一篇关于Go的基准测试编写的基本介绍(链接)。我以此为内容，整理输出内容。 对自己编写package编写基准测</description>
    </item>
    
    <item>
      <title>Go并发编程模式进阶</title>
      <link>http://sharecore.net/post/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 10 Jun 2013 00:09:57 +0000</pubDate>
      
      <guid>http://sharecore.net/post/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6/</guid>
      <description>&lt;p&gt;前段时间Google的&lt;a href=&#34;http://profiles.google.com/ajmani&#34;&gt;Sameer Ajmani&lt;/a&gt;在Google I/O上做了关于Go的并发模式的介绍。Slides&lt;a href=&#34;http://talks.golang.org/2013/advconc.slide&#34;&gt;在此&lt;/a&gt;,youtube视频&lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=QDDwwePbDtw&#34;&gt;在此&lt;/a&gt;(注：上述链接均需翻墙)。&lt;/p&gt;

&lt;p&gt;本篇的前提是对goroutine+channel的并发编程模式有基本的了解，建议能读懂下面这个经典ping-pong程序为好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)
//定义一个结构
type Ball struct{ hits int }

func main() {
	//创建一个可传输Ball的channel
	table := make(chan *Ball)
	//分别启动ping/pong的goroutine 
	go Player(&amp;quot;Ping&amp;quot;, table)
	go Player(&amp;quot;Pong&amp;quot;, table)
	//一个Ball进入channel，游戏开始
	table &amp;lt;- new(Ball)
	//“主”程序暂停1s,等待ping/pong的goroutine执行
	time.Sleep(1 * time.Second)
	//从channel取出Ball，游戏开始
	&amp;lt;-table
	//可通过引发异常，显示调用栈的详细信息
	//panic(&amp;quot;show me the stacks&amp;quot;)
}

func Player(name string, table chan *Ball) {
	for {
	    //channel取出Ball，并hits++
	    ball := &amp;lt;-table
	    ball.hits++
	    fmt.Println(name, ball.hits)
	    //暂停1ms
	    time.Sleep(1 * time.Millisecond)
	    //将Ball放回channel
	    table &amp;lt;- ball
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ping-pong程序的执行过程，可以用下图来表示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sharecore.net/images/advgoroutine/pingpong.png&#34; alt=&#34;ping-pong程序执行过程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接下来主要说说Go的并发编程里的一些“文艺”使用:如何通信?如何周期性处理事件？如何取消执行？这些高级用法的支持，除了依赖我们上面看到的goroutine+channel外，还要依赖于Go的一个statement：select+case。它可以用来管理和监听多个channel,从而起到“多路复用”的效果。他的基本语法如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select {
	case xc &amp;lt;- x:
		// 向channel(xc)发送一个对象(x)
	case y := &amp;lt;-yc:
		// 从channel(yc)获取一个对象并赋值到变量(y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们以一个能持续从RSS获取资源项的例子来说明select的使用。
假设我们已经拥有下面这个接口所定义的功能：从一个RSS url获取资源项目(一次调用，获取一次,这个接口的模拟实现，见附1。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Fetcher interface {
	Fetch() (items []Item, next time.Time, err error)//能从某个rss url获取它的资源项，并能同时返回下一次获取的时间next。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`我们用下面这个接口来表示我们希望达到的功能：能从rss url上循环获取资源项，形成资源流的形式；循环获取功能，可以中止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Subscription interface {
	Updates() &amp;lt;-chan Item//用channel来存放资源，即可实现流的显示
	Close() error//关闭获取
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先看一个这项功能的简单实现，熟悉多线程编程的，应该觉得很眼熟。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
type NavieSub struct {
	closed  bool
	err     error
	updates chan Item
	fetcher Fetcher
}

func (s *NavieSub) Close() error {
	s.closed = true//设置关闭标识为true
	return s.err
}
func (s *NavieSub) Updates() &amp;lt;-chan Item {
	return s.updates//返回已经获取的资源项
}
func (s *NavieSub) loop() {//循环获取的方法实现
	for {
	    if s.closed {//判断关闭标识
	        close(s.updates)//close是内置函数
	        return
	    }
	    items, next, err := s.fetcher.Fetch()//执行一次获取
	    if err != nil {
	        s.err = err
	        time.Sleep(10 * time.Second)
	        continue//出错时暂停10秒后再开始下次循环
	    }
	    for _, item := range items {//将获取的资源项写入，用于返回
	        s.updates &amp;lt;- item
	    }
	    if now := time.Now(); next.After(now) {//暂停到下次获取时间时，再开始下一次获取
	        time.Sleep(next.Sub(now))
	    }
	}
}

func main() {
	fetcher := &amp;amp;FakeFether{channel: &amp;quot;sharecore.info&amp;quot;}
	s := &amp;amp;NavieSub{
	    fetcher: fetcher,
	    updates: make(chan Item),
	}
	
	go s.loop()//启动一个例程执行loop方法（与启动一个线程类似）
	
	time.AfterFunc(3*time.Second, func() {
	    fmt.Println(&amp;quot;closed&amp;quot;, s.Close())
	})
	
	for item := range s.Updates() {
	    fmt.Println(item.Channel, item.Title)
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`那以上的简单实现，会有什么问题呢？&lt;/p&gt;

&lt;p&gt;首先，&lt;strong&gt;明显发现s.err和s.closed的访问是非同步的。&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.closed = true //设置关闭标识为true

if s.closed {//判断关闭标识
	        close(s.updates) //close是内置函数
	        return
	    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`然后，我们看到s.updates的定义如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s := &amp;amp;NavieSub{
	    fetcher: fetcher,
	    updates: make(chan Item),//定义为没有buffer的channel，一个channel中同时只能有一个元素
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`根据上面的定义，s.updates一次只能有一个item进入，当它没有其他goroutine从它里面取出元素时，下面这行代码会&lt;strong&gt;发生堵塞&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.updates &amp;lt;- item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`那以上问题我们有什么办法来避免呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Container的安装与使用介绍</title>
      <link>http://sharecore.net/post/container%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 17 Mar 2013 00:36:33 +0000</pubDate>
      
      <guid>http://sharecore.net/post/container%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>今天想在机器上搭建一个我用Go写的玩的一个分布式文件小系统，可我只有一台Laptop和一台Desktop，两台都装的Ubuntu 12.04。</description>
    </item>
    
  </channel>
</rss>